// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/price.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PriceService_GetCurrentPrice_FullMethodName  = "/price.PriceService/GetCurrentPrice"
	PriceService_GetCurrentPrices_FullMethodName = "/price.PriceService/GetCurrentPrices"
	PriceService_SubscribePrices_FullMethodName  = "/price.PriceService/SubscribePrices"
	PriceService_GetKlines_FullMethodName        = "/price.PriceService/GetKlines"
)

// PriceServiceClient is the client API for PriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 價格服務
type PriceServiceClient interface {
	// 獲取單個商品當前價格
	GetCurrentPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*PriceResponse, error)
	// 獲取多個商品當前價格
	GetCurrentPrices(ctx context.Context, in *GetPricesRequest, opts ...grpc.CallOption) (*PricesResponse, error)
	// 訂閱價格更新流（Server Streaming）
	SubscribePrices(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PriceUpdate], error)
	// 獲取 K 線資料
	GetKlines(ctx context.Context, in *GetKlinesRequest, opts ...grpc.CallOption) (*KlinesResponse, error)
}

type priceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceServiceClient(cc grpc.ClientConnInterface) PriceServiceClient {
	return &priceServiceClient{cc}
}

func (c *priceServiceClient) GetCurrentPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*PriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PriceResponse)
	err := c.cc.Invoke(ctx, PriceService_GetCurrentPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceServiceClient) GetCurrentPrices(ctx context.Context, in *GetPricesRequest, opts ...grpc.CallOption) (*PricesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PricesResponse)
	err := c.cc.Invoke(ctx, PriceService_GetCurrentPrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceServiceClient) SubscribePrices(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PriceUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PriceService_ServiceDesc.Streams[0], PriceService_SubscribePrices_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, PriceUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PriceService_SubscribePricesClient = grpc.ServerStreamingClient[PriceUpdate]

func (c *priceServiceClient) GetKlines(ctx context.Context, in *GetKlinesRequest, opts ...grpc.CallOption) (*KlinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KlinesResponse)
	err := c.cc.Invoke(ctx, PriceService_GetKlines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriceServiceServer is the server API for PriceService service.
// All implementations must embed UnimplementedPriceServiceServer
// for forward compatibility.
//
// 價格服務
type PriceServiceServer interface {
	// 獲取單個商品當前價格
	GetCurrentPrice(context.Context, *GetPriceRequest) (*PriceResponse, error)
	// 獲取多個商品當前價格
	GetCurrentPrices(context.Context, *GetPricesRequest) (*PricesResponse, error)
	// 訂閱價格更新流（Server Streaming）
	SubscribePrices(*SubscribeRequest, grpc.ServerStreamingServer[PriceUpdate]) error
	// 獲取 K 線資料
	GetKlines(context.Context, *GetKlinesRequest) (*KlinesResponse, error)
	mustEmbedUnimplementedPriceServiceServer()
}

// UnimplementedPriceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPriceServiceServer struct{}

func (UnimplementedPriceServiceServer) GetCurrentPrice(context.Context, *GetPriceRequest) (*PriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentPrice not implemented")
}
func (UnimplementedPriceServiceServer) GetCurrentPrices(context.Context, *GetPricesRequest) (*PricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentPrices not implemented")
}
func (UnimplementedPriceServiceServer) SubscribePrices(*SubscribeRequest, grpc.ServerStreamingServer[PriceUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePrices not implemented")
}
func (UnimplementedPriceServiceServer) GetKlines(context.Context, *GetKlinesRequest) (*KlinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKlines not implemented")
}
func (UnimplementedPriceServiceServer) mustEmbedUnimplementedPriceServiceServer() {}
func (UnimplementedPriceServiceServer) testEmbeddedByValue()                      {}

// UnsafePriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceServiceServer will
// result in compilation errors.
type UnsafePriceServiceServer interface {
	mustEmbedUnimplementedPriceServiceServer()
}

func RegisterPriceServiceServer(s grpc.ServiceRegistrar, srv PriceServiceServer) {
	// If the following call pancis, it indicates UnimplementedPriceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PriceService_ServiceDesc, srv)
}

func _PriceService_GetCurrentPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceServiceServer).GetCurrentPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceService_GetCurrentPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceServiceServer).GetCurrentPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceService_GetCurrentPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceServiceServer).GetCurrentPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceService_GetCurrentPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceServiceServer).GetCurrentPrices(ctx, req.(*GetPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceService_SubscribePrices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PriceServiceServer).SubscribePrices(m, &grpc.GenericServerStream[SubscribeRequest, PriceUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PriceService_SubscribePricesServer = grpc.ServerStreamingServer[PriceUpdate]

func _PriceService_GetKlines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKlinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceServiceServer).GetKlines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceService_GetKlines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceServiceServer).GetKlines(ctx, req.(*GetKlinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PriceService_ServiceDesc is the grpc.ServiceDesc for PriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "price.PriceService",
	HandlerType: (*PriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentPrice",
			Handler:    _PriceService_GetCurrentPrice_Handler,
		},
		{
			MethodName: "GetCurrentPrices",
			Handler:    _PriceService_GetCurrentPrices_Handler,
		},
		{
			MethodName: "GetKlines",
			Handler:    _PriceService_GetKlines_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribePrices",
			Handler:       _PriceService_SubscribePrices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/price.proto",
}
